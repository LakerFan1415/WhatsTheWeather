{"version":3,"sources":["components/Header.jsx","components/SelectCity.jsx","components/WeatherChart.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","setChartNumber","chartNumber","handleClick","id","onClick","href","SelectCity","props","clickChange","useEffect","document","getElementById","addEventListener","e","key","style","backgroundColor","type","placeholder","WeatherChart","chartInfo","city","labels","chartData","chartData2","chartData3","chartDataset","d","num","i","hourly","length","date","Date","dt","toLocaleString","push","temp","label","borderColor","data","daily","toDateString","morn","day","night","getDatesAndTimes","config","datasets","options","maintainAspectRatio","responsive","plugins","title","display","text","toUpperCase","substring","color","font","size","chartParent","childNodes","removeChild","el","createElement","appendChild","Chart","App","useState","setCity","setChartInfo","fetchCity","a","fetch","process","cityInfo","ok","json","response","coord","lat","lon","allData","response2","value","Error","window","alert","message","textAlign","listEl","getElementsByTagName","className","classList","remove","target","parentNode","add","innerHTML","inputs","toLowerCase","test","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8bda12b9.chunk.js","sourcesContent":["const Header = ({setChartNumber, chartNumber, handleClick}) =>{\n\n        //Focusing on the chart when clicked\n    return(\n        <div id = 'header'>\n            <h1>Weather Forecast</h1>\n            <ul>\n                <li onClick={handleClick} ><a href='#header'>Current</a></li>\n                <li onClick={handleClick} ><a href='#header'>2-Day Forecast</a></li>\n                <li onClick={handleClick} ><a href='#header'>7-Day Forecast</a></li>\n            </ul>\n        </div>\n    )\n}\n\nexport default Header;","import {React, useEffect} from 'react';\n\nconst SelectCity = (props) => {\n\n    const { clickChange } = props;\n\n    useEffect(() => {\n        document.getElementById('city-input').addEventListener('keypress', (e) => {\n            if(e.key === 'Enter'){\n                clickChange();\n            }\n        } );\n    })\n\n    return (\n        <div style={{backgroundColor: '#c5d8ef'}}>\n            <input id = 'city-input' type='text' placeholder='Enter A City'></input>\n            <button id='city-btn' onClick={clickChange}>Enter</button>\n        </div>\n    )\n}\n\nexport default SelectCity;","import Chart from 'chart.js/auto';\nimport { useEffect } from 'react';\n\n\nconst WeatherChart = ({chartNumber, chartInfo, city }) => {\n\n  //ChartData2 & 3 used for daily temp\n  var labels = [];\n  var chartData = [];\n  var chartData2 = [];\n  var chartData3 = [];\n  var chartDataset = [];\n\n\n  //Converts Dates of hourly information\n  const getDatesAndTimes = (d, num) => {\n    \n      labels = [];\n      chartData = [];\n      chartData2 = [];\n      chartData3 = [];\n    try {  \n      if (num === 1){\n        // Gets dates for hourly\n        //Hourly is the 2 Day Forecast\n        for (let i=0; i < d.hourly.length; i++){\n          let date = new Date((d.hourly[i].dt) * 1000).toLocaleString();\n\n          labels.push(date)\n          chartData.push(d.hourly[i].temp)\n\n        }\n        chartDataset.push({\n          label: 'Temperature',\n          backgroundColor: '#219cd7',\n          borderColor: '#219cd7',\n          data: chartData,\n        })\n\n      } else if (num === 2){\n        //Get dates & times for daily\n        //Displays 8 Days\n        for (let i=0; i < d.daily.length; i++){\n          let date = new Date((d.daily[i].dt) * 1000).toDateString();\n\n          //morn - day - night\n          labels.push(date)\n          chartData.push(d.daily[i].temp.morn)\n          chartData2.push(d.daily[i].temp.day)\n          chartData3.push(d.daily[i].temp.night)\n        }\n        // --> Length is 48 so 2 Days\n        //Sets each line for the line chart\n        // Blue --> #00d4ff\n        // Tan --> #fd8e2d\n        // Night --> #070a0a\n        chartDataset.push({\n          label: 'Morning',\n          backgroundColor: '#219cd7',\n          borderColor: '#219cd7',\n          data: chartData,\n        })\n        chartDataset.push({\n          label: 'Day',\n          backgroundColor: '#e0ad81',\n          borderColor: '#e0ad81',\n          data: chartData2,\n          })\n        chartDataset.push({\n          label: 'Night',\n          backgroundColor: '#070a0a',\n          borderColor: '#070a0a',\n          data: chartData3,\n        })\n\n      } else {\n          for (let i=0; i < 24; i ++){\n            let date = new Date((d.hourly[i].dt) * 1000).toLocaleString();\n\n            labels.push(date)\n            chartData.push(d.hourly[i].temp)\n          }\n          chartDataset.push({\n            label: 'Temperature',\n            backgroundColor: '#219cd7',\n            borderColor: '#219cd7',\n            data: chartData,\n          })\n        \n      }\n\n    }catch(e){\n\n      }\n  }\n\n  getDatesAndTimes(chartInfo, chartNumber)\n\n\n  var data = {\n    labels: labels,\n    datasets: chartDataset,\n  }\n\n  const config = {\n      type: 'line',\n      data,\n      options: {\n        maintainAspectRatio: false,\n        responsive: true,\n        plugins: {\n          title: {\n            display: true,\n            text: city ? city[0].toUpperCase() + city.substring(1) : city, //Format the city name & size\n            color: 'black',\n            font: {\n              size: 30\n            }\n          }\n        }\n      }\n      \n  }\n\n      useEffect(() => {\n        let chartParent = document.getElementById('charts');\n        if (chartParent.childNodes[0]) {chartParent.removeChild(document.getElementById('aChart'))};\n        if(chartNumber != null){\n          let el = document.createElement('canvas');\n          el.id = 'aChart';\n          chartParent.appendChild(el);\n\n          //Background Color of the canvas\n          document.getElementById('aChart').style.backgroundColor = '#c5d8ef';\n          let chart = new Chart(  /* eslint-disable-line */\n            document.getElementById('aChart'),\n            config\n          )\n        }\n        \n      })\n\n    return(\n        <div id='charts'>\n            \n        </div>\n    )\n}\n\nexport default WeatherChart;","import { useState } from 'react';\nimport './App.css';\n\nimport Header from './components/Header';\nimport SelectCity from './components/SelectCity';\nimport WeatherChart from './components/WeatherChart';\n\nfunction App() {\n\n  const [city, setCity] = useState('');\n\n  const [chartInfo, setChartInfo] = useState({});\n\n  //0 --> Current, 1 --> 2-Day Forecast, 2 --> 7-Day Forecast\n  const [chartNumber, setChartNumber] = useState(null);\n\n\n  const handleClick = () => {\n    var format = /[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,<>\\/?~]/; /* eslint-disable-line */\n    let inputs = document.getElementById('city-input').value.toLowerCase();\n    if(!format.test(inputs)){ \n      setCity(inputs);\n      fetchCity(inputs);\n\n     }\n\n  }\n\n  /* Adds and removes the selected class --> Used in header */\n  const handleMenuClick = (e) => {\n    let numbers = {'Current': 0, '2-Day Forecast':1, '7-Day Forecast':2}\n\n        let listEl = document.getElementsByTagName('li');\n        for (let i=0; i < listEl.length; i++){\n            if (listEl[i].className){\n                listEl[i].classList.remove(listEl[i].className);\n            }\n        }\n        e.target.parentNode.classList.add('selected');\n        //setChartNumber(numbers[e.target.childNodes[0]])\n        setChartNumber(numbers[e.target.innerHTML])\n  }\n\n  //Work on the fetch and how it is handled\n  const fetchCity = async (city) => {\n    try {\n    const cityInfo = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=imperial&appid=${process.env.REACT_APP_API_KEY}`);\n    if (cityInfo.ok){\n    const response = await cityInfo.json()\n\n    //Fetches all Information\n    // Added error handling\n      const allData = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${response.coord.lat}&lon=${response.coord.lon}&units=imperial&exclude={part}&appid=${process.env.REACT_APP_API_KEY}`);\n        if (allData.ok){\n          const response2 = await allData.json()\n\n          //if (response.message){window.alert('Please Enter Another City!')};\n\n        setChartInfo(response2);\n\n        //Converts unix utc date to local date\n        // Add in alerts section\n        /*\n        if (response2.alerts) {\n          let alertDate = new Date((response2.alerts[0].start) * 1000);\n          let alertMonth = alertDate.getMonth() + 1;\n          let alertDay = alertDate.getDate();\n          let alertYear = alertDate.getFullYear();\n      }\n      */\n    }\n    //Set Value to Zero\n    document.getElementById('city-input').value = '';\n\n  } else {\n    throw new Error('Try Another City Or Check Spelling');\n  }\n    } catch(e) {\n      window.alert(e.message);\n    }\n    \n  }\n\n  return (\n    <div style={{textAlign:'center'}}>\n      <Header setChartNumber={setChartNumber} chartNumber={chartNumber} handleClick={handleMenuClick}/>\n      <SelectCity clickChange={handleClick} />\n      <WeatherChart chartNumber={chartNumber} chartInfo={chartInfo} city={city}/>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}