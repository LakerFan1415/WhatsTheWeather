{"version":3,"sources":["components/Header.jsx","components/SelectCity.jsx","components/WeatherChart.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","setChartNumber","chartNumber","handleClick","id","onClick","href","SelectCity","props","clickChange","style","backgroundColor","type","placeholder","WeatherChart","chartInfo","city","labels","chartData","chartData2","chartData3","chartDataset","d","num","i","hourly","length","date","Date","dt","toLocaleString","push","temp","label","borderColor","data","daily","toDateString","morn","day","night","e","getDatesAndTimes","config","datasets","options","maintainAspectRatio","responsive","plugins","title","display","text","toUpperCase","substring","color","font","size","useEffect","chartParent","document","getElementById","childNodes","removeChild","el","createElement","appendChild","Chart","App","useState","setCity","setChartInfo","fetchCity","a","fetch","process","REACT_APP_API_KEY","cityInfo","ok","json","response","coord","lat","lon","allData","response2","value","Error","window","alert","message","textAlign","listEl","getElementsByTagName","className","classList","remove","target","parentNode","add","innerHTML","inputs","toLowerCase","test","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8c364eb6.chunk.js","sourcesContent":["const Header = ({setChartNumber, chartNumber, handleClick}) =>{\r\n\r\n        //Focusing on the chart when clicked\r\n    return(\r\n        <div id = 'header'>\r\n            <h1>Weather Forecast</h1>\r\n            <ul>\r\n                <li onClick={handleClick} ><a href='#header'>Current</a></li>\r\n                <li onClick={handleClick} ><a href='#header'>2-Day Forecast</a></li>\r\n                <li onClick={handleClick} ><a href='#header'>7-Day Forecast</a></li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import {React, useEffect} from 'react';\r\n\r\nconst SelectCity = (props) => {\r\n\r\n    const { clickChange } = props;\r\n\r\n    return (\r\n        <div style={{backgroundColor: '#c5d8ef'}}>\r\n            <input id = 'city-input' type='text' placeholder='Enter A City'></input>\r\n            <button id='city-btn' onClick={clickChange}>Enter</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectCity;","import Chart from 'chart.js/auto';\r\nimport { useEffect } from 'react';\r\n\r\n\r\nconst WeatherChart = ({chartNumber, chartInfo, city }) => {\r\n\r\n  //ChartData2 & 3 used for daily temp\r\n  var labels = [];\r\n  var chartData = [];\r\n  var chartData2 = [];\r\n  var chartData3 = [];\r\n  var chartDataset = [];\r\n\r\n\r\n  //Converts Dates of hourly information\r\n  const getDatesAndTimes = (d, num) => {\r\n    \r\n      labels = [];\r\n      chartData = [];\r\n      chartData2 = [];\r\n      chartData3 = [];\r\n    try {  \r\n      if (num === 1){\r\n        // Gets dates for hourly\r\n        //Hourly is the 2 Day Forecast\r\n        for (let i=0; i < d.hourly.length; i++){\r\n          let date = new Date((d.hourly[i].dt) * 1000).toLocaleString();\r\n\r\n          labels.push(date)\r\n          chartData.push(d.hourly[i].temp)\r\n\r\n        }\r\n        chartDataset.push({\r\n          label: 'Temperature',\r\n          backgroundColor: '#219cd7',\r\n          borderColor: '#219cd7',\r\n          data: chartData,\r\n        })\r\n\r\n      } else if (num === 2){\r\n        //Get dates & times for daily\r\n        //Displays 8 Days\r\n        for (let i=0; i < d.daily.length; i++){\r\n          let date = new Date((d.daily[i].dt) * 1000).toDateString();\r\n\r\n          //morn - day - night\r\n          labels.push(date)\r\n          chartData.push(d.daily[i].temp.morn)\r\n          chartData2.push(d.daily[i].temp.day)\r\n          chartData3.push(d.daily[i].temp.night)\r\n        }\r\n        // --> Length is 48 so 2 Days\r\n        //Sets each line for the line chart\r\n        // Blue --> #00d4ff\r\n        // Tan --> #fd8e2d\r\n        // Night --> #070a0a\r\n        chartDataset.push({\r\n          label: 'Morning',\r\n          backgroundColor: '#219cd7',\r\n          borderColor: '#219cd7',\r\n          data: chartData,\r\n        })\r\n        chartDataset.push({\r\n          label: 'Day',\r\n          backgroundColor: '#e0ad81',\r\n          borderColor: '#e0ad81',\r\n          data: chartData2,\r\n          })\r\n        chartDataset.push({\r\n          label: 'Night',\r\n          backgroundColor: '#070a0a',\r\n          borderColor: '#070a0a',\r\n          data: chartData3,\r\n        })\r\n\r\n      } else {\r\n          for (let i=0; i < 24; i ++){\r\n            let date = new Date((d.hourly[i].dt) * 1000).toLocaleString();\r\n\r\n            labels.push(date)\r\n            chartData.push(d.hourly[i].temp)\r\n          }\r\n          chartDataset.push({\r\n            label: 'Temperature',\r\n            backgroundColor: '#219cd7',\r\n            borderColor: '#219cd7',\r\n            data: chartData,\r\n          })\r\n        \r\n      }\r\n\r\n    }catch(e){\r\n\r\n      }\r\n  }\r\n\r\n  getDatesAndTimes(chartInfo, chartNumber)\r\n\r\n\r\n  var data = {\r\n    labels: labels,\r\n    datasets: chartDataset,\r\n  }\r\n\r\n  const config = {\r\n      type: 'line',\r\n      data,\r\n      options: {\r\n        maintainAspectRatio: false,\r\n        responsive: true,\r\n        plugins: {\r\n          title: {\r\n            display: true,\r\n            text: city ? city[0].toUpperCase() + city.substring(1) : city, //Format the city name & size\r\n            color: 'black',\r\n            font: {\r\n              size: 30\r\n            }\r\n          }\r\n        }\r\n      }\r\n      \r\n  }\r\n\r\n      useEffect(() => {\r\n        let chartParent = document.getElementById('charts');\r\n        if (chartParent.childNodes[0]) {chartParent.removeChild(document.getElementById('aChart'))};\r\n        if(chartNumber != null){\r\n          let el = document.createElement('canvas');\r\n          el.id = 'aChart';\r\n          chartParent.appendChild(el);\r\n\r\n          //Background Color of the canvas\r\n          document.getElementById('aChart').style.backgroundColor = '#c5d8ef';\r\n          let chart = new Chart(  /* eslint-disable-line */\r\n            document.getElementById('aChart'),\r\n            config\r\n          )\r\n        }\r\n        \r\n      })\r\n\r\n    return(\r\n        <div id='charts'>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherChart;","import { useState } from 'react';\r\nimport './App.css';\r\n\r\nimport Header from './components/Header';\r\nimport SelectCity from './components/SelectCity';\r\nimport WeatherChart from './components/WeatherChart';\r\n\r\nfunction App() {\r\n\r\n  const [city, setCity] = useState('');\r\n\r\n  const [chartInfo, setChartInfo] = useState({});\r\n\r\n  //0 --> Current, 1 --> 2-Day Forecast, 2 --> 7-Day Forecast\r\n  const [chartNumber, setChartNumber] = useState(null);\r\n\r\n\r\n  const handleClick = () => {\r\n    var format = /[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,<>\\/?~]/; /* eslint-disable-line */\r\n    let inputs = document.getElementById('city-input').value.toLowerCase();\r\n    if(!format.test(inputs)){ \r\n      setCity(inputs);\r\n      fetchCity(inputs);\r\n     }\r\n\r\n  }\r\n\r\n  /* Adds and removes the selected class --> Used in header */\r\n  const handleMenuClick = (e) => {\r\n    let numbers = {'Current': 0, '2-Day Forecast':1, '7-Day Forecast':2}\r\n\r\n        let listEl = document.getElementsByTagName('li');\r\n        for (let i=0; i < listEl.length; i++){\r\n            if (listEl[i].className){\r\n                listEl[i].classList.remove(listEl[i].className);\r\n            }\r\n        }\r\n        e.target.parentNode.classList.add('selected');\r\n        //setChartNumber(numbers[e.target.childNodes[0]])\r\n        setChartNumber(numbers[e.target.innerHTML])\r\n  }\r\n\r\n  //Work on the fetch and how it is handled\r\n  const fetchCity = async (city) => {\r\n    try {\r\n    const cityInfo = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=imperial&appid=${process.env.REACT_APP_API_KEY}`);\r\n    if (cityInfo.ok){\r\n    const response = await cityInfo.json()\r\n\r\n    //Fetches all Information\r\n    // Added error handling\r\n      const allData = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${response.coord.lat}&lon=${response.coord.lon}&units=imperial&exclude={part}&appid=${process.env.REACT_APP_API_KEY}`);\r\n        if (allData.ok){\r\n          const response2 = await allData.json()\r\n\r\n          //if (response.message){window.alert('Please Enter Another City!')};\r\n\r\n        setChartInfo(response2);\r\n\r\n        //Converts unix utc date to local date\r\n        // Add in alerts section\r\n        /*\r\n        if (response2.alerts) {\r\n          let alertDate = new Date((response2.alerts[0].start) * 1000);\r\n          let alertMonth = alertDate.getMonth() + 1;\r\n          let alertDay = alertDate.getDate();\r\n          let alertYear = alertDate.getFullYear();\r\n      }\r\n      */\r\n    }\r\n    //Set Value to Zero\r\n    document.getElementById('city-input').value = '';\r\n\r\n  } else {\r\n    throw new Error('Try Another City Or Check Spelling');\r\n  }\r\n    } catch(e) {\r\n      window.alert(e.message);\r\n    }\r\n    \r\n  }\r\n\r\n  return (\r\n    <div style={{textAlign:'center'}}>\r\n      <Header setChartNumber={setChartNumber} chartNumber={chartNumber} handleClick={handleMenuClick}/>\r\n      <SelectCity clickChange={handleClick} />\r\n      <WeatherChart chartNumber={chartNumber} chartInfo={chartInfo} city={city}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}